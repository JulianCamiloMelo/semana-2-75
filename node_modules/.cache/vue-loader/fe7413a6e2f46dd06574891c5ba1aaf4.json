{"remainingRequest":"C:\\Users\\Julian Camilo Melo\\Documents\\MINTIC\\Ciclo III\\Semana II\\Reto\\semana-2-75\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Julian Camilo Melo\\Documents\\MINTIC\\Ciclo III\\Semana II\\Reto\\semana-2-75\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Julian Camilo Melo\\Documents\\MINTIC\\Ciclo III\\Semana II\\Reto\\semana-2-75\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Julian Camilo Melo\\Documents\\MINTIC\\Ciclo III\\Semana II\\Reto\\semana-2-75\\src\\components\\SectionNews.vue?vue&type=template&id=2f865558&","dependencies":[{"path":"C:\\Users\\Julian Camilo Melo\\Documents\\MINTIC\\Ciclo III\\Semana II\\Reto\\semana-2-75\\src\\components\\SectionNews.vue","mtime":1607790423916},{"path":"C:\\Users\\Julian Camilo Melo\\Documents\\MINTIC\\Ciclo III\\Semana II\\Reto\\semana-2-75\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Julian Camilo Melo\\Documents\\MINTIC\\Ciclo III\\Semana II\\Reto\\semana-2-75\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Julian Camilo Melo\\Documents\\MINTIC\\Ciclo III\\Semana II\\Reto\\semana-2-75\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Julian Camilo Melo\\Documents\\MINTIC\\Ciclo III\\Semana II\\Reto\\semana-2-75\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}